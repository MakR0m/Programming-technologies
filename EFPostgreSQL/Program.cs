using EFPostgreSQL.Data;
using EFPostgreSQL.Models;
using Microsoft.EntityFrameworkCore;
using System.Diagnostics.Metrics;
using System.Runtime.InteropServices;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;

namespace EFPostgreSQL
{
    internal class Program
    {
        //В данном проекте PostgreSQL запускается в докер-контейнере.
        //PostgreSQL в Docker — это полноценная СУБД (система управления базами данных), запущенная в контейнере.

        #region PostgreSQL
        //PostgreSQL — это реляционная система управления базами данных (СУБД) с открытым исходным кодом.
        //Она используется для хранения структурированных данных, поддерживает транзакции, связи, индексы, расширенные типы данных (jsonb, enum, массивы и др.).
        //В данном проекте PostgreSQL работает в Docker-контейнере, порт 5432 проброшен наружу, база называется ef_demo.
        //pgAdmin — это официальная GUI-программа для администрирования PostgreSQL.
        //С её помощью можно:
        //- Подключаться к базе данных
        //- Просматривать таблицы, поля, индексы и связи
        //- Выполнять SQL-запросы
        //- Создавать и изменять объекты базы (таблицы, роли, функции и т.д.)

        //Данные подключения к PostgreSQL:
        //Host: localhost
        //Port: 5432
        //User: postgres
        //Password: postgres
        //Database: ef_demo

        //После подключения в pgAdmin структура базы доступна по пути:
        //Servers → Databases → ef_demo → Schemas → public → Tables
        #endregion


        #region Docker
        //Docker - инструмент, позволяющий запускать приложения в изолированной среде (контейнере). "Лёгкая виртуальная машина"
        //Запускаем Docker Desktop, чтобы демон работал в фоне.
        //Клонируем репозиторий проекта (например, из GitHub) с помощью команды: git clone https://github.com/docker/welcome-to-docker
        //Переходим в папку проекта в терминале.
        //Убедившись, что в проекте есть Dockerfile (или создаём свой), выполняем команду сборки: "docker build -t welcome-to-docker ." Это создаёт образ с именем welcome-to-docker
        //Открываем Docker Desktop, переходим на вкладку Images и находим образ welcome-to-docker.
        //Запускаем контейнер из образа, указав проброс порта (например, 3000:3000).(в программе) docker run -p 3000:3000 welcome-to-docker (в терминале)
        //Открываем браузер и переходим по адресу: http://localhost:3000
        #endregion
        #region Docker PostgreSQL

        #endregion
        #region EntityFramework (EF Core)
        //EF Core - это ORM (это ORM (Object-Relational Mapper) для .NET, разработанный Microsoft.
        //Он позволяет разработчику работать с базой данных через C#-объекты, а не вручную писать SQL-запросы.
        //[ Приложение C# ] ⇄ EF Core ⇄ PostgreSQL (СУБД)

        //| Компонент         | Назначение                                                             |
        //| ----------------- | -----------------------------------------------------------------------|
        //| DbContext         | Главный класс, представляющий сессию работы с БД(контекст)             |
        //| DbSet<T>          | Коллекция сущностей определённого типа(аналог таблицы в БД)            |
        //| Entity(сущность)  | Класс C#, описывающий структуру таблицы                                |
        //| Migration         | Механизм для пошагового изменения схемы БД(создание/обновление таблиц) |

        //CodeFirst - сначала модель c#, которая создает таблицы в бд посредством EF
        //DBFirst - сначала бд, а на ее основе EF генерирует классы из таблиц
        //Плюсы:
        //Работа с БД как с объектами
        //Инкапсуляция SQL
        //Поддержка асинхронности(async/await)
        //Поддержка миграций (это набор инструкций, которые говорят EF Core, как изменить структуру базы данных, чтобы она соответствовала текущим C#-моделям)
        //Кросс-платформенность и гибкость
        //Ограничения:
        //Не всё можно выразить через LINQ
        //Потенциально сложные запросы могут быть менее оптимальными, чем вручную написанный SQL
        //ORM добавляет слой абстракции и нужно понимать, что именно выполняется в SQL

        //Про миграции. Пример: добавление нового поля в класс на основе которого уже создана таблица.
        //EF сравнит текущие классы с предыдущим состоянием, создаст файл миграции с SQL-командами(например, ALTER TABLE) и будет готов применить их к базе

        //Подытог:
        //Модель — это C#-класс, описывающий структуру данных.
        //EF превращает этот класс в таблицу и LINQ-запросы в SQL.
        //Миграции фиксируют изменения моделей и применяют их к БД.
        //По умолчанию: одна модель = одна таблица, но есть гибкость при необходимости.
        #endregion

        #region DTO
        //DTO - это объект, предназначенный для передачи данных между слоями приложения (например, между контроллером и клиентом),
        //не совпадающий напрямую с моделью EF
        //Зачем?
        //Изоляция EF-моделей от внешнего мира (безопасность, устойчивость к изменениям).
        //Можно отдавать только нужные данные — не всё, что есть в модели.
        //Позволяет агрегировать или переименовывать поля, преобразовывать вложенные сущности.
        //Упрощает тестирование и читаемость кода.
        //| Сценарий                                            | Используем DTO?                 |
        //| ----------------------------------------------------| ------------------------------- |
        //| Работа внутри EF и БД                               | Необязательно                   |
        //| Передача данных из API                              | Да                              |
        //| Валидация входных данных(например, `UserCreateDto`) | Да                              |
        //| Хранение в БД                                       | Нет(используются только модели) |
        #endregion

        #region Миграция
        //Создание и применение миграции через консоль, находясь в папке проекта .csproj
        //Установка глобального инструмента: dotnet tool install --global dotnet-ef (Один раз)  (глобальный CLI-инструмент (dotnet-ef), позволяет вызывать миграции и обновлять базу через CLI)
        //dotnet ef migrations add Init  - создание миграции (появится папка Migrations)
        //dotnet ef database update      - применение миграции к БД
        //EF запрашивает таблицу _EFMigrationHistory, не находит ее (первый раз) создает, применяет миграцию и завершает процесс
        #endregion


        static async Task Main(string[] args)
        {
            using var db = new AppDbContext();
            
            //Создание новой записи
            db.Users.Add(new User { Name = "Роман", Age = 30 });
            await db.SaveChangesAsync();

            //Чтение всех записей
            var users = await db.Users.ToListAsync();
            foreach (var user in users)
                Console.WriteLine($"{user.Id}: {user.Name}, {user.Age} лет");
        }
    }
}
