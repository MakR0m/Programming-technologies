namespace SOLID
{
    internal class Program
    {
        // SRP (Single Responsobility) (Принцип единой ответственности).
        // "У класса должна быть только одна причина для изменения" (Р. Мартин)
        // Класс не должен заниматься "всем подряд". Например, если класс обрабатывает б.л., пишет в бд, формирует отчет и логирует действия - он делает слишком много.

        // O - Open/Closed Principle (Принцип открытости/закрытости)
        // Программные сущности должны быть открыты для расширения, но закрыты для изменения
        // Ты не должен менять существующий код, чтобы добафить нофую функциональность. 
        // Вместо этого ты должен использовать: наследование, интерфейсы, делегирование, стратегии (паттерн)
        // Таким образом код уже написан и протестирован, а новые фичи - через расширение, а не переписывание

        //LSP - Liskov Substitution Princile (Принцип подстановки Барбары Лисков)
        //"Объекты подклассов должны быть взаимозаменяемы с обьектами своих суперклассов без нарушения корректности программы"
        //Если класс В наследуется от класса А, то должна быть возможность использовать В везде, где ожидается А, без ошибок
        //Пример с прямоугольником и квадратом. Квадрату нельзя наследоваться от прямоугольника, потому что он отличается от него поведением. Квадрат выделять лучше в отдельный класс.
        //Подставив потомка вместо базового класса при ширине = 4 и высоте 5, мы ожидаем 20, а получим 25, т.к последнее значение приравняется к ширине и высоте (квадрат).
        //Подкласс не должен ужесточать поведение родителя
        //Подкласс не должен выбрасывать исключения на то, что допустимо вродителе
        //Подкласс не должен "ломать" инварианты, ожидаемые от родителя
        //Инвариант - внутреннее правило объекта, которое всегда должно быть выполнено
        //Инвариант класса - это правило или набор правил которые:            
        //-должны сохраняться при любых допустимых действиях с обьектом
        //-не должны нарушаться при вызове методов класса
        //-гарантируют корректное состояние обьекта
        //ISP - Interface Segregation Principle (Принцип разделения интерфейсов)
        //"Клиенты не должны зависеть от интерфейсов, который они не используют"
        //Лучше много маленьких специализированных интерфейсов, чем один универсальный монстр.
        //Проблем толстых интерфейсов - если интерфейс заствляет реализовывать методы, которые обьекту не нужны, это нарушение ISP
        //Каждый класс зависит только от того, что ему действительно нужно — и это суть ISP.
        //Пример с принтером и мультипринтером (IDevice - неправильно, правильно IPrintable, IFaxable, IScanable
        static void Main(string[] args)
        {
        }
    }
}
